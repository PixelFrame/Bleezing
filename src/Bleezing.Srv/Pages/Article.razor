@page "/Articles"
@page "/Articles/{Page}"
@page "/Article/{Title}"

@using Bleezing.Srv.Data.Model
@inject ArticleService arsvc
@inject IJSRuntime jsrt

<DynamicComponent Type="@contentType" Parameters="@contentParam"></DynamicComponent>

@code {
    [Parameter]
    public string? Page { get; set; }
    [Parameter]
    public string? Title { get; set; }

    private Type contentType = typeof(LoadingPrompt);
    private Dictionary<string, object> contentParam = new()
        {
            ["Message"] = "Loading content..."
        };

    protected override async Task OnInitializedAsync()
    {
        await RenderContent();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RenderContent();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsrt.InvokeVoidAsync("prismRenderAll");
    }

    private async Task RenderContent()
    {
        if (Title == null)
        {
            await RenderList();
            return;
        }
        var article = await arsvc.GetArticleByTitleAsync(Title);
        if (article is Post post) { await RenderPost(post); return; }
        if (article is MarkdownPost mdpost) { await RenderMarkdownPost(mdpost); return; }
        if (article is Album album) { await RenderAlbum(album); return; }
        if (article is MediaPost mediapost) { await RenderMediaPost(mediapost); return; }
    }

    private async Task RenderList()
    {
        if (Page == null) Page = "1";
        contentType = typeof(ArticleList);
        contentParam = new()
            {
                ["currentPageNum"] = Page
            };
    }

    private async Task RenderPost(Post post)
    {
        contentType = typeof(NotImplementedPrompt);
        contentParam = new();
    }

    private async Task RenderMarkdownPost(MarkdownPost mdpost)
    {
        contentType = typeof(MarkdownArea);
        contentParam = new()
            {
                ["RawMarkdown"] = mdpost.RawMarkdown
            };
    }

    private async Task RenderAlbum(Album album)
    {
        contentType = typeof(AlbumArea);
        contentParam = new()
            {
                ["ImgSrcs"] = album.ImgSrcs
            };
    }

    private async Task RenderMediaPost(MediaPost mediapost)
    {
        contentType = typeof(MediaArea);
        contentParam = new()
            {
                ["Src"] = mediapost.Src,
                ["Uri"] = mediapost.Uri
            };
    }
}
